{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 93, "column": 0}, "map": {"version":3,"sources":["file:///Users/DELL/Desktop/AI_ASSISTANT/sachin-crayon-d/crayon-eligibility-test/src/app/page.js"],"sourcesContent":["\"use client\";\nimport React, { useState } from \"react\";\nimport rehypeHighlight from \"rehype-highlight\";\nimport {\n  Box,\n  Checkbox,\n  Button,\n  Card,\n  CardContent,\n  FormControl,\n  FormControlLabel,\n  FormGroup,\n  FormLabel,\n  Grid,\n  LinearProgress,\n  MenuItem,\n  Radio,\n  RadioGroup,\n  Select,\n  TextField,\n  Typography,\n  useTheme,\n} from \"@mui/material\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport ReactMarkdown from \"react-markdown\";\nimport \"../app/globals.css\";\n\nconst UserForm = () => {\n  const theme = useTheme();\n  const [messages, setMessages] = useState([]);\n  const [score, setScore] = useState(0);\n  const [userInfo, setUserInfo] = useState({\n    name: \"\",\n    yearOfStudy: \"\",\n    regNo: \"\",\n    domain: \"\",\n    topics: [],\n  });\n\n  const [isTestStarted, setIsTestStarted] = useState(false);\n  const [questionNumber, setQuestionNumber] = useState(1);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [selectedAnswer, setSelectedAnswer] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [finalResult, setFinalResult] = useState(null);\n\n  const areaToSkills = {\n    \"Frontend Development\": [\"React\", \"HTML\", \"CSS\"],\n    \"Backend Development\": [\"Node.js\", \"Golang\"],\n    \"Full Stack Development\": [\"React\", \"Node.js\", \"HTML\", \"CSS\", \"Javascript\"],\n    \"Mobile Development\": [\"React Native\"],\n    \"UI/UX Design\": [\"Figma\"],\n    \"Generative AI\": [\n      \"Python\",\n      \"Javascript\",\n      \"React\",\n      \"Next JS\",\n      \"SQL\",\n      \"Node JS\",\n    ],\n  };\n\n  const handleTopicChange = (topic) => {\n    setUserInfo((prev) => ({\n      ...prev,\n      topics: prev.topics.includes(topic)\n        ? prev.topics.filter((t) => t !== topic)\n        : [...prev.topics, topic],\n    }));\n  };\n\n  const handleProceedToTest = async () => {\n    setMessages([\n      {\n        role: \"user\",\n        content: JSON.stringify({\n          Name: userInfo.name,\n          Reg_No: userInfo.regNo,\n          Year_of_Study: userInfo.yearOfStudy,\n          Domain: userInfo.areaOfInterest,\n          Topics: userInfo.topics,\n        }),\n      },\n    ]);\n    setIsTestStarted(true);\n    await fetchQuestion();\n  };\n\n  // Add this inside your UserForm component, before the return statements\n  const getSectionName = (questionNumber) => {\n    if (questionNumber >= 1 && questionNumber <= 5)\n      return \"Section A - Life Skills\";\n    if (questionNumber >= 6 && questionNumber <= 10)\n      return \"Section B - Logical Reasoning\";\n    if (questionNumber >= 11 && questionNumber <= 20)\n      return \"Section C - C Programming\";\n    if (questionNumber >= 21 && questionNumber <= 35)\n      return `Section D - ${userInfo.domain}`;\n    return \"Final Assessment\";\n  };\n\n  const fetchQuestion = async (userDataOrAnswer) => {\n    try {\n      setIsLoading(true);\n\n      const requestBody = {\n        questionNumber,\n        messages: [\n          ...messages,\n          {\n            role: \"user\",\n            content: JSON.stringify(userDataOrAnswer || userInfo),\n          },\n        ],\n      };\n\n      const response = await fetch(\"/api/chat\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(requestBody),\n      });\n\n      if (!response.ok) throw new Error(\"Network response error\");\n\n      const data = await response.json();\n\n      if (questionNumber === 35) {\n        setFinalResult(data.result);\n        if (\n          data.result.feedbackForPreviousQuestion.toLowerCase() == \"correct\"\n        ) {\n          setScore(score + 1);\n        }\n      } else {\n        const {\n          questionNumber,\n          question,\n          options = [],\n          feedbackForPreviousQuestion,\n        } = data.result;\n        if (feedbackForPreviousQuestion.toLowerCase() == \"correct\") {\n          setScore(score + 1);\n        }\n        setCurrentQuestion({\n          question,\n          options,\n          feedbackForPreviousQuestion,\n        });\n\n        setQuestionNumber(questionNumber);\n\n        // Constructing the message\n        const feedbackMessage =\n          feedbackForPreviousQuestion &&\n          feedbackForPreviousQuestion !== \"null\" &&\n          feedbackForPreviousQuestion !== \"Null\"\n            ? feedbackForPreviousQuestion\n            : \"\";\n\n        setMessages((prev) => [\n          ...prev,\n          {\n            role: \"assistant\",\n            content: JSON.stringify({\n              questionNumber: questionNumber,\n              question: question,\n              options: options,\n              feedbackForPreviousQuestion: feedbackForPreviousQuestion,\n              currentScore: score,\n            }),\n          },\n        ]);\n      }\n    } catch (error) {\n      console.error(\"Fetch error:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!selectedAnswer) return;\n\n    setMessages((prev) => [\n      ...prev,\n      {\n        role: \"user\",\n        content: JSON.stringify({ selectedAnswer: selectedAnswer }),\n      },\n    ]);\n    await fetchQuestion(selectedAnswer);\n    setSelectedAnswer(\"\");\n  };\n\n  if (finalResult) {\n    return (\n      <Box\n        sx={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          minHeight: \"100vh\",\n          bgcolor: \"background.default\",\n          p: 2,\n        }}\n      >\n        <Card\n          sx={{\n            maxWidth: 600,\n            width: \"100%\",\n            boxShadow: theme.shadows[3],\n            borderRadius: 4,\n          }}\n        >\n          <CardContent>\n            <Typography\n              variant=\"h5\"\n              gutterBottom\n              sx={{\n                fontWeight: 700,\n                color: \"primary.main\",\n                textAlign: \"center\",\n                mb: 4,\n              }}\n            >\n              Assessment Results\n            </Typography>\n\n            <Grid container spacing={3}>\n              <ResultItem title=\"Score\" value={score} />\n              <ResultItem title=\"Category\" value={finalResult.category} />\n              <Grid item xs={12}>\n                <Typography variant=\"subtitle1\" sx={{ fontWeight: 600 }}>\n                  Areas to Improve:\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  {finalResult.areasToImprove}\n                </Typography>\n              </Grid>\n              {finalResult.category !== \"Not Qualified\" && (\n                <Grid item xs={12}>\n                  <Typography variant=\"subtitle1\" sx={{ fontWeight: 600 }}>\n                    Next Task:\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"primary\">\n                    {finalResult.Task}\n                  </Typography>\n                </Grid>\n              )}\n            </Grid>\n          </CardContent>\n        </Card>\n      </Box>\n    );\n  }\n\n  if (!isTestStarted) {\n    return (\n      <Box\n        sx={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          minHeight: \"100vh\",\n          bgcolor: \"background.default\",\n          p: 2,\n        }}\n      >\n        <Card\n          sx={{\n            maxWidth: 600,\n            width: \"100%\",\n            boxShadow: theme.shadows[3],\n            borderRadius: 4,\n          }}\n        >\n          <CardContent>\n            <Typography\n              variant=\"h5\"\n              sx={{\n                mb: 4,\n                fontWeight: 700,\n                textAlign: \"center\",\n                color: \"primary.main\",\n              }}\n            >\n              Student Registration\n            </Typography>\n\n            <Grid container spacing={3}>\n              <FormField\n                label=\"Full Name\"\n                value={userInfo.name}\n                onChange={(e) =>\n                  setUserInfo((p) => ({ ...p, name: e.target.value }))\n                }\n              />\n\n              <FormField\n                label=\"Registration Number\"\n                value={userInfo.regNo}\n                onChange={(e) =>\n                  setUserInfo((p) => ({ ...p, regNo: e.target.value }))\n                }\n              />\n\n              <Grid item xs={12}>\n                <FormControl fullWidth>\n                  <FormLabel sx={{ mb: 1, fontWeight: 600 }}>\n                    Year of Study\n                  </FormLabel>\n                  <Select\n                    value={userInfo.yearOfStudy}\n                    onChange={(e) =>\n                      setUserInfo((p) => ({\n                        ...p,\n                        yearOfStudy: e.target.value,\n                      }))\n                    }\n                    sx={{ borderRadius: 2 }}\n                  >\n                    {[1, 2, 3, 4].map((year) => (\n                      <MenuItem key={year} value={String(year)}>\n                        Year {year}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n\n              <Grid item xs={12}>\n                <FormControl fullWidth>\n                  <FormLabel sx={{ mb: 1, fontWeight: 600 }}>Domain</FormLabel>\n                  <Select\n                    value={userInfo.domain}\n                    onChange={(e) => {\n                      setUserInfo((p) => ({\n                        ...p,\n                        domain: e.target.value,\n                        // Reset topics when area changes\n                        topics: p.topics.filter((topic) =>\n                          areaToSkills[e.target.value].includes(topic)\n                        ),\n                      }));\n                    }}\n                    sx={{ borderRadius: 2 }}\n                  >\n                    {[\n                      \"Frontend Development\",\n                      \"Backend Development\",\n                      \"Full Stack Development\",\n                      \"Mobile Development\",\n                      \"UI/UX Design\",\n                      \"Generative AI\",\n                    ].map((area) => (\n                      <MenuItem key={area} value={area}>\n                        {area}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n\n              <Grid item xs={12}>\n                <FormControl component=\"fieldset\" fullWidth>\n                  <FormLabel component=\"legend\" sx={{ mb: 1, fontWeight: 600 }}>\n                    Technical Skills\n                  </FormLabel>\n                  {userInfo.domain ? (\n                    <FormGroup row sx={{ gap: 2 }}>\n                      {areaToSkills[userInfo.domain]?.map((topic) => (\n                        <FormControlLabel\n                          key={topic}\n                          control={\n                            <Checkbox\n                              checked={userInfo.topics.includes(topic)}\n                              onChange={() => handleTopicChange(topic)}\n                              size=\"small\"\n                            />\n                          }\n                          label={topic}\n                          sx={{ m: 0 }}\n                        />\n                      ))}\n                    </FormGroup>\n                  ) : (\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      Please select a Domain to view relevant skills\n                    </Typography>\n                  )}\n                </FormControl>\n              </Grid>\n\n              <Grid item xs={12} sx={{ mt: 2 }}>\n                <Button\n                  fullWidth\n                  variant=\"contained\"\n                  size=\"large\"\n                  onClick={handleProceedToTest}\n                  disabled={\n                    !userInfo.name ||\n                    !userInfo.regNo ||\n                    !userInfo.yearOfStudy ||\n                    !userInfo.domain ||\n                    userInfo.topics.length === 0\n                  }\n                  sx={{\n                    py: 1.5,\n                    borderRadius: 2,\n                    fontWeight: 600,\n                    textTransform: \"none\",\n                    fontSize: 16,\n                  }}\n                >\n                  Start Assessment\n                </Button>\n              </Grid>\n            </Grid>\n          </CardContent>\n        </Card>\n      </Box>\n    );\n  }\n\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        minHeight: \"100vh\",\n        bgcolor: \"background.default\",\n        p: 2,\n      }}\n    >\n      {currentQuestion ? ( // Only show if currentQuestion exists\n        <Card\n          sx={{\n            maxWidth: 800,\n            width: \"100%\",\n            boxShadow: theme.shadows[3],\n            borderRadius: 4,\n          }}\n        >\n          <CardContent>\n            <Typography\n              variant=\"subtitle1\"\n              sx={{\n                fontWeight: 600,\n                color: \"text.secondary\",\n                mb: 1,\n              }}\n            >\n              {getSectionName(questionNumber)}\n            </Typography>\n            <Typography\n              variant=\"subtitle1\"\n              sx={{\n                fontWeight: 400,\n                color: \"text.secondary\",\n                mb: 1,\n                fontSize: 20,\n              }}\n            >\n              Question {questionNumber}/35\n            </Typography>\n\n            <LinearProgress\n              variant=\"determinate\"\n              value={(questionNumber / 35) * 100}\n              sx={{ height: 6, borderRadius: 3, mb: 3 }}\n            />\n\n            {currentQuestion?.feedbackForPreviousQuestion &&\n              ![\"null\", \"none\", \"not applicable\"].includes(\n                currentQuestion.feedbackForPreviousQuestion.toLowerCase()\n              ) && (\n                <Box\n                  sx={{\n                    bgcolor: \"#F2EFE7\",\n                    borderRadius: 2,\n                    p: 2,\n                    mb: 3,\n                  }}\n                >\n                  <Typography variant=\"body2\" sx={{ fontWeight: 250 }}>\n                    {currentQuestion.feedbackForPreviousQuestion}\n                  </Typography>\n                </Box>\n              )}\n\n            <Typography variant=\"h6\" sx={{ mb: 3, fontWeight: 300 }}>\n              <ReactMarkdown rehypePlugins={[rehypeHighlight]}>\n                {currentQuestion?.question}\n              </ReactMarkdown>\n            </Typography>\n\n            <form onSubmit={handleSubmit}>\n              {currentQuestion?.options?.length > 0 ? (\n                <RadioGroup\n                  value={selectedAnswer}\n                  onChange={(e) => setSelectedAnswer(e.target.value)}\n                  sx={{ gap: 1.5 }}\n                >\n                  {currentQuestion.options.map((option, index) => (\n                    <FormControlLabel\n                      key={index}\n                      value={option}\n                      control={<Radio />}\n                      label={<Typography variant=\"body2\">{option}</Typography>}\n                      sx={{\n                        border: \"1px solid\",\n                        borderColor: \"divider\",\n                        borderRadius: 2,\n                        px: 2,\n                        py: 1,\n                        m: 0,\n                      }}\n                    />\n                  ))}\n                </RadioGroup>\n              ) : (\n                <TextField\n                  fullWidth\n                  multiline\n                  minRows={3}\n                  value={selectedAnswer}\n                  onChange={(e) => setSelectedAnswer(e.target.value)}\n                  placeholder=\"Type your answer here...\"\n                  sx={{\n                    \"& .MuiOutlinedInput-root\": {\n                      borderRadius: 2,\n                    },\n                  }}\n                />\n              )}\n\n              <Button\n                type=\"submit\"\n                fullWidth\n                variant=\"contained\"\n                disabled={!selectedAnswer || isLoading}\n                sx={{\n                  mt: 3,\n                  py: 1.5,\n                  borderRadius: 2,\n                  fontWeight: 600,\n                  textTransform: \"none\",\n                  fontSize: 16,\n                }}\n              >\n                {isLoading ? (\n                  <CircularProgress size={24} sx={{ color: \"white\" }} />\n                ) : (\n                  \"Submit Answer \"\n                )}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n      ) : (\n        // Show loading state or empty state when no question is generated\n        <CircularProgress />\n      )}\n    </Box>\n  );\n};\n\n// Helper components\nconst ResultItem = ({ title, value }) => (\n  <Grid item xs={6}>\n    <Typography variant=\"subtitle1\" sx={{ fontWeight: 600 }}>\n      {title}\n    </Typography>\n    <Typography variant=\"h6\" color=\"primary\">\n      {value}\n    </Typography>\n  </Grid>\n);\n\nconst FormField = ({ label, value, onChange }) => (\n  <Grid item xs={12}>\n    <TextField\n      fullWidth\n      label={label}\n      value={value}\n      onChange={onChange}\n      variant=\"outlined\"\n      sx={{\n        \"& .MuiOutlinedInput-root\": {\n          borderRadius: 2,\n        },\n      }}\n    />\n  </Grid>\n);\n\nexport default UserForm;\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1001, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}